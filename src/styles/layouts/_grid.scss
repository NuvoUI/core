@use 'sass:math';
@use '../utilities/variables' as *;

// Grid Container Mixins
@mixin grid {display: grid;}
@mixin grid-inline {display: inline-grid;}

// Grid Template Mixins
@mixin cols($count) {grid-template-columns: repeat($count, minmax(0, 1fr));}
@mixin rows($count) {grid-template-rows: repeat($count, minmax(0, 1fr));}

// Auto-fit/fill Mixins
@mixin auto-fit($min-width) {grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));}
@mixin auto-fill($min-width) {grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));}

// Grid Flow Mixins
@mixin flow-in-row { grid-auto-flow: row; }
@mixin flow-in-col { grid-auto-flow: column; }
@mixin flow-dense-items { grid-auto-flow: dense; }

// Grid Alignment Mixins
@mixin justify-items($value) {justify-items: $value;}
@mixin align-items($value) {align-items: $value;}
@mixin place-items($value) {place-items: $value;}

// Grid Item Placement Mixins
@mixin span-col($span) {grid-column: span $span / span $span;}
@mixin span-row($span) {grid-row: span $span / span $span;}
@mixin col-start($start) {grid-column-start: $start;}
@mixin col-end($end) {grid-column-end: $end;}
@mixin row-start($start) {grid-row-start: $start;}
@mixin row-end($end) {grid-row-end: $end;}

@mixin grid-position($col, $row) {
  grid-column: $col;
  grid-row: $row;
}
@mixin position-col($col) {
  grid-column: $start;
}
@mixin position-row($row) {
  grid-row: $row;
}


// Classes
.grid { @include grid; }
.grid.inline { @include grid-inline; }

// Grid Template Classes
@for $i from 1 through $column-count {
  .grid.cols-#{$i} { @include cols($i); }
  .grid.rows-#{$i} { @include rows($i); }

  // Responsive grid columns
  @each $breakpoint, $width in $breakpoints {
    @media (min-width: $width) {
      .grid.cols-#{$i}\@#{$breakpoint} {
        @include cols($i);
      }
    }
  }
}

// Generate Column Span Classes with Responsive Variants
@for $i from 1 through $column-count {
  .span-col-#{$i} {
    @include span-col($i);
  }

  .span-row-#{$i} {
    @include span-row($i);
  }

  @each $breakpoint, $width in $breakpoints {
    @media (min-width: $width) {
      .span-col-#{$i}\@#{$breakpoint} {
        @include span-col($i);
      }

      .span-row-#{$i}\@#{$breakpoint} {
        @include span-row($i);
      }
    }
  }
}


// Auto-fit/fill Classes
@each $breakpoint, $width in $breakpoints {
  .grid.auto-fit-#{$breakpoint} { @include auto-fit($width); }
  .grid.auto-fill-#{$breakpoint} { @include auto-fill($width); }
}

// Flow Classes
.grid.flow-row { @include flow-in-row; }
.grid.flow-col { @include flow-in-col; }
.grid.flow-dense { @include flow-dense-items; }

// Alignment Classes
$alignments: (
  'start': start,
  'end': end,
  'center': center,
  'stretch': stretch
);

@each $name, $value in $alignments {
  .justify-items-#{$name} { justify-items: $value; }
  .align-items-#{$name} { align-items: $value; }
  .place-items-#{$name} { place-items: $value; }

  @each $breakpoint, $width in $breakpoints {
    @media (min-width: $width) {
      .justify-items-#{$name}\@#{$breakpoint} {
        justify-items: $value;
      }
      .align-items-#{$name}\@#{$breakpoint} {
        align-items: $value;
      }
      .place-items-#{$name}\@#{$breakpoint} {
        place-items: $value;
      }
    }
  }
}
