// _spacing.scss

@use 'sass:math';
@use './variables' as *; 


// Padding mixins
@mixin p($val) { $val: if($val==0, $val, $val + px); padding: $val !important; }
@mixin px($val) { $val: if($val==0, $val, $val + px); padding-left: $val !important; padding-right: $val !important; }
@mixin py($val) { $val: if($val==0, $val, $val + px); padding-top: $val !important; padding-bottom: $val !important; }
@mixin pt($val) { $val: if($val==0, $val, $val + px); padding-top: $val !important; }
@mixin pr($val) { $val: if($val==0, $val, $val + px); padding-right: $val !important; }
@mixin pb($val) { $val: if($val==0, $val, $val + px); padding-bottom: $val !important; }
@mixin pl($val) { $val: if($val==0, $val, $val + px); padding-left: $val !important; }

// Margin mixins
@mixin m($val) { $val: if($val==0, $val, $val + px); margin: $val !important; }
@mixin mx($val) { $val: if($val==0, $val, $val + px); margin-left: $val !important; margin-right: $val !important; }
@mixin my($val) { $val: if($val==0, $val, $val + px); margin-top: $val !important; margin-bottom: $val !important; }
@mixin mt($val) { $val: if($val==0, $val, $val + px); margin-top: $val !important; }
@mixin mr($val) { $val: if($val==0, $val, $val + px); margin-right: $val !important; }
@mixin mb($val) { $val: if($val==0, $val, $val + px); margin-bottom: $val !important; }
@mixin ml($val) { $val: if($val==0, $val, $val + px); margin-left: $val !important; }


// Generate utilities from spacing map
@each $i in $spacings {
    // Padding classes
    .p-#{$i} { @include p($i); }
    .px-#{$i} { @include px($i); }
    .py-#{$i} { @include py($i); }
    .pt-#{$i} { @include pt($i); }
    .pr-#{$i} { @include pr($i); }
    .pb-#{$i} { @include pb($i); }
    .pl-#{$i} { @include pl($i); }

    // Margin classes
    .m-#{$i} { @include m($i); }
    .mx-#{$i} { @include mx($i); }
    .my-#{$i} { @include my($i); }
    .mt-#{$i} { @include mt($i); }
    .mr-#{$i} { @include mr($i); }
    .mb-#{$i} { @include mb($i); }
    .ml-#{$i} { @include ml($i); }
    // .gap-#{$key} { gap: $value; }
}


// Responsive Position Classes
@each $breakpoint, $width in $breakpoints {
    @media (min-width: $width) {
        // Generate utilities from spacing map
        @each $i in $spacings {
            // Padding classes
            .p-#{$i}\@#{$breakpoint} { @include p($i); }
            .px-#{$i}\@#{$breakpoint} { @include px($i); }
            .py-#{$i}\@#{$breakpoint} { @include py($i); }
            .pt-#{$i}\@#{$breakpoint} { @include pt($i); }
            .pr-#{$i}\@#{$breakpoint} { @include pr($i); }
            .pb-#{$i}\@#{$breakpoint} { @include pb($i); }
            .pl-#{$i}\@#{$breakpoint} { @include pl($i); }

            // Margin classes
            .m-#{$i}\@#{$breakpoint} { @include m($i); }
            .mx-#{$i}\@#{$breakpoint} { @include mx($i); }
            .my-#{$i}\@#{$breakpoint} { @include my($i); }
            .mt-#{$i}\@#{$breakpoint} { @include mt($i); }
            .mr-#{$i}\@#{$breakpoint} { @include mr($i); }
            .mb-#{$i}\@#{$breakpoint} { @include mb($i); }
            .ml-#{$i}\@#{$breakpoint} { @include ml($i); }
        }
    }
}

// Auto margin utilities
@mixin ml-auto { margin-left: auto; }
@mixin mr-auto { margin-right: auto; }
@mixin mx-auto { @include ml-auto; @include mr-auto; }

.mx-auto { @include mx-auto; }


.ml-auto { @include ml-auto; }
.mr-auto { @include mr-auto; }



// Gap Mixins
@mixin gap($value) {
    gap: if($value == 0, $value, $value + px);
}

@mixin gap-x($value) {
    column-gap: if($value == 0, $value, $value + px);
}

@mixin gap-y($value) {
    row-gap: if($value == 0, $value, $value + px);
}

// Gap Classes
.gap-auto { gap: auto; }

@each $i in $spacings {
    .gap-#{$i} { @include gap($i); }
    .gap-x-#{$i} { @include gap-x($i); }
    .gap-y-#{$i} { @include gap-y($i); }
}

// Responsive Gap Classes
@each $breakpoint, $width in $breakpoints {
  @media (min-width: $width) {
    @each $i in $spacings {
      .gap-#{$i}\@#{$breakpoint} { gap: $i; }
      .gap-x-#{$i}\@#{$breakpoint} { column-gap: $i; }
      .gap-y-#{$i}\@#{$breakpoint} { row-gap: $i; }
    }
  }
}