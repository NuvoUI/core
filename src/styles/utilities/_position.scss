@use './variables' as *;

// Position Mixins
@mixin static {
  position: static;
}

@mixin relative {
  position: relative;
}

@mixin absolute {
  position: absolute;
}

@mixin fixed {
  position: fixed;
} 
 
@mixin sticky {
  position: sticky;
  z-index: 999;
  top: 0;
} 

// Position Classes
.static {
  @include static;
}

.relative {
  @include relative;
}

.absolute {
  @include absolute;
}

.fixed {
  @include fixed;
}

.sticky {
  @include sticky;
}

// Responsive Position Classes
@each $breakpoint, $width in $breakpoints {
  @media (min-width: $width) {
    .static\@#{$breakpoint} {
      @include static;
    }
    .relative\@#{$breakpoint} {
      @include relative;
    }
    .absolute\@#{$breakpoint} {
      @include absolute;
    }
    .fixed\@#{$breakpoint} {
      @include fixed;
    }
    .sticky\@#{$breakpoint} {
      @include sticky;
    }
  }
}


// Top, Right, Bottom, Left Mixins
@mixin top($value) {
  top: if($value == 0, $value, $value + px);
}

@mixin right($value) {
  right: if($value == 0, $value, $value + px);
}

@mixin bottom($value) {
  bottom: if($value == 0, $value, $value + px);
}

@mixin left($value) {
  left: if($value == 0, $value, $value + px);
}

// Top, Right, Bottom, Left Classes
@each $i in $spacings {
  .top-#{$i} {@include top($i);}
  .right-#{$i} {@include right($i);}
  .bottom-#{$i} {@include bottom($i);}
  .left-#{$i} {@include left($i);}
}


// Pixel widths based on spacing scale
@each $breakpoint, $width in $breakpoints {
  @media (min-width: $width) {
      // Generate utilities from spacing map
      @each $i in $spacings {
          .top-#{$i}\@#{$breakpoint} {height: if($i == 0, $i, $i + px);}
          .right-#{$i}\@#{$breakpoint} {width: if($i == 0, $i, $i + px);}
          .bottom-#{$i}\@#{$breakpoint} {min-width: if($i == 0, $i, $i + px);}
          .left-#{$i}\@#{$breakpoint} {min-height: if($i == 0, $i, $i + px);}
      }
  }
}