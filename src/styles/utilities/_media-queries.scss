// Section: Utilities
// Module: Media Queries

@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "../abstracts" as *;
@use "../abstracts/functions" as FN;

/**
 * @description Media query mixins.
 * @param {string|number} $breakpoint - The breakpoint value.
 * @param {string} $type - The media query type (e.g. 'lg', 'md').
 */
@mixin media-up($breakpoint) {
  $blueprint-value: FN.get-breakpoint-value($breakpoint);
  $unit: math.unit($blueprint-value);
  @if $unit == '' {
    $blueprint-value: $blueprint-value * 1px; 
    $unit: 'px';
  }
  
  @media screen and (min-width: FN.get-breakpoint-value($blueprint-value)) {
    @content;
  }
}

@mixin media-down($breakpoint) {
  $blueprint-value: FN.get-breakpoint-value($breakpoint);
  $unit: math.unit($blueprint-value);
  @if $unit == '' {
    $blueprint-value: $blueprint-value * 1px; 
  }
  $val: $blueprint-value - 0.01;
  @media screen and (max-width: #{$val}) {
    @content;
  }
}

@mixin media-between($lower, $upper) {
  $lower-val: FN.get-breakpoint-value($lower);
  $upper-val: FN.get-breakpoint-value($upper);
  $unit: math.unit($upper-val);
  @if $unit == '' {
    $upper-val: $upper-val * 1px; 
  }
  $upper-val: $blueprint-value - 0.01;

  @media screen and (min-width: #{$lower-val}) and (max-width: #{$upper-val}) {
    @content;
  }
}

// Only at specific breakpoint
@mixin media-only($breakpoint) {
  $min: FN.get-breakpoint-value($breakpoint);
  $next-breakpoint: null;

  @each $name, $width in $breakpoints {
    @if $width > $min and (meta.type-of($next-breakpoint) == "null" or $width < $next-breakpoint) {
      $next-breakpoint: $width;
    }
  }

  @if $next-breakpoint {
    @media (min-width: #{$min}) and (max-width: #{$next-breakpoint - 0.02px}) {
      @content;
    }
  } @else {
    @media (min-width: #{$min}) {
      @content;
    }
  }
}

// Touch devices
@mixin touch {
  @media (hover: none) and (pointer: coarse) {
    @content;
  }
}

// Print media
@mixin print {
  @media print {
    @content;
  }
}

// Example: @include supports(display: grid) { }
@mixin supports($property) {
  @supports (#{$property}) {
    @content;
  }
}

// System preference only
@mixin prefers-dark {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}

// User preference takes precedence
@mixin dark-mode {
  // Apply when user explicitly chooses dark
  [data-theme="dark"] & {
    @content;
  }

  // Apply when system is dark AND user hasn't made a choice
  @media (prefers-color-scheme: dark) {
    [data-theme="system"] & {
      @content;
    }
  }
}

// Device orientation
@mixin landscape {
  @media screen and (orientation: landscape) {
    @content;
  }
}

@mixin portrait {
  @media screen and (orientation: portrait) {
    @content;
  }
}

// Modern aspect ratio
@mixin aspect-ratio($ratio) {
  aspect-ratio: #{$ratio};
}

// Dynamic viewport units (modern browsers)
@mixin dvh {
  @supports (height: 100dvh) {
    height: 100dvh;
  }

  @supports not (height: 100dvh) {
    height: 100vh;
  }
}

// Safe area insets (notches, home indicators)
@mixin safe-area-inset($property, $position) {
  #{$property}: env(safe-area-inset-#{$position});
}

@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}

// Data-saving mode
@mixin save-data {
  @media (prefers-reduced-data: reduce) {
    @content;
  }
}

// Mouse precision detection
@mixin fine-pointer {
  @media (pointer: fine) {
    @content;
  }
}

// Display mode for PWAs
@mixin display-mode($mode: "standalone") {
  @media (display-mode: #{$mode}) {
    @content;
  }
}

// High contrast mode
@mixin high-contrast {
  @media (forced-colors: active) {
    @content;
  }
}
