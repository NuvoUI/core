@use 'sass:map';
@use 'sass:meta';
@use './variables' as *;

// Breakpoint mixins
@mixin media-up($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media screen and (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else if meta.type-of($breakpoint) == number {
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  }
}

@mixin media-down($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media screen and (max-width: (map.get($breakpoints, $breakpoint) - 0.02px)) {
      @content;
    }
  } @else if meta.type-of($breakpoint) == number {
    @media screen and (max-width: ($breakpoint - 0.02px)) {
      @content;
    }
  }
}

@mixin media-between($lower, $upper) {
  @if map.has-key($breakpoints, $lower) and map.has-key($breakpoints, $upper) {
    @media screen and (min-width: map.get($breakpoints, $lower)) and (max-width: (map.get($breakpoints, $upper) - 0.02px)) {
      @content;
    }
  }
}

// Only at specific breakpoint
@mixin media-only($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $min: map.get($breakpoints, $breakpoint);
    $next-breakpoint: null;
    
    @each $name, $width in $breakpoints {
      @if $width > $min and ($next-breakpoint == null or $width < $next-breakpoint) {
        $next-breakpoint: $width;
      }
    }
    
    @if $next-breakpoint {
      @media (min-width: $min) and (max-width: $next-breakpoint - 1) {
        @content;
      }
    } @else {
      @media (min-width: $min) {
        @content;
      }
    }
  }
}

// Example: @include container(45em) { }
@mixin container-query($size) {
  @container (min-width: $size) {
    @content;
  }
}

// Touch devices
@mixin touch {
  @media (hover: none) and (pointer: coarse) {
    @content;
  }
}

// Print media
@mixin print {
  @media print {
    @content;
  }
}

// Modern feature detection
// Example: @include supports(display: grid) { }
@mixin supports($property) {
  @supports #{$property} {
    @content;
  }
}




// Mixin: Dark Mode
// Applies styles when the user prefers a dark color scheme.
@mixin dark-mode {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}

// Device orientation
@mixin landscape {
  @media screen and (orientation: landscape) {
    @content;
  }
}

@mixin portrait {
  @media screen and (orientation: portrait) {
    @content;
  }
}

// Modern aspect ratio
@mixin aspect-ratio($ratio) {
  aspect-ratio: #{$ratio};
}

// Dynamic viewport units (modern browsers)
@mixin dvh {
  @supports (height: 100dvh) {
    height: 100dvh;
  }
  
  @supports not (height: 100dvh) {
    height: 100vh;
  }
}

// Safe area insets (notches, home indicators)
@mixin safe-area-inset($property, $position) {
  #{$property}: env(safe-area-inset-#{$position});
}

@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}

// High contrast mode
@mixin high-contrast {
  @media (forced-colors: active) {
    @content;
  }
}
