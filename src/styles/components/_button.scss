// _button.scss
@use 'sass:map';

@use '../utilities/variables' as *;
@use '../utilities/typography' as *;
@use '../utilities/borders' as *;
@use '../themes/theme' as *;


// Button Base Mixins
@mixin btn-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border: 1px solid transparent;
  border-radius: 0.375rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  
  &:disabled {
    cursor: not-allowed;
    opacity: 0.65;
  }

  // Loading state
  &.loading {
    position: relative;
    color: transparent !important;
    pointer-events: none;

    &::after {
      content: "";
      position: absolute;
      width: 1rem;
      height: 1rem;
      border: 1px solid;
      border-radius: 50%;
      border-right-color: transparent;
      animation: spin 0.75s linear infinite;
    }
  }
}

// Button Variants
@mixin btn-solid($color) {
  background-color: theme-color($color);
  color: if($color == 'light', black, white);//var(--text-inverse);

  &:hover:not(:disabled) { background-color: theme-color($color, 'hover'); }
  &:active:not(:disabled) { background-color: theme-color($color, 'active'); }
  &:disabled { background-color: theme-color($color, 'disabled'); }
}

@mixin btn-outline($color) {
  background-color: transparent;
  border-color: theme-color($color);
  color: theme-color($color);

  &:hover:not(:disabled) {
    background-color: theme-color($color);
    color: var(--text-inverse);
  }

  &:active:not(:disabled) {
    background-color: theme-color($color, 'active');
  }

  &:disabled {
    border-color: theme-color($color, 'disabled');
    color: theme-color($color, 'disabled');
  }
}

@mixin btn-ghost($color) {
  background-color: transparent;
  color: theme-color($color);

  &:hover:not(:disabled) {
    background-color: theme-color($color, '10');
  }

  &:active:not(:disabled) {
    background-color: theme-color($color, '25');
  }

  &:disabled {
    color: theme-color($color, 'disabled');
  }
}

// Button Sizes
@mixin btn-size($size) {
  font-size: map.get($font-sizes, $size);
  padding: map.get($padding-map, $size);

  .btn.icon {
    $icon-sizes: (
      'xs': 0.75rem,
      'sm': 1rem,
      'md': 1.25rem,
      'lg': 1.5rem,
      'xl': 1.75rem
    );
    
    width: map.get($icon-sizes, $size);
    height: map.get($icon-sizes, $size);
  }
}
 
// Button Shapes
@mixin btn-shape($shape) {
  @if $shape == 'rounded' {
    @include rounded(0.375rem);
  } @else if $shape == 'pill' {
    border-radius: 9999px;
  } @else if $shape == 'square' {
    border-radius: 0;
  }
}

@mixin btn-group-base {
  display: inline-flex;
  position: relative;

  // Remove double borders between buttons
  .btn:not(:first-child) { margin-left: -1px; }

  // Handle z-index for hover states
  .btn:hover { z-index: 1; }

  // Basic button group styles
  .btn { position: relative; }
  .btn:not(:first-child):not(:last-child) { border-radius: 0; }
  .btn:first-child:dir(ltr) { border-top-right-radius: 0rem; border-bottom-right-radius: 0rem; }
  .btn:last-child:dir(ltr) { border-top-left-radius: 0rem; border-bottom-left-radius: 0rem; }
  
  @if $enable-rtl {
    .btn:first-child:dir(rtl) { border-top-left-radius: 0rem; border-bottom-left-radius: 0rem; }
    .btn:last-child:dir(rtl) { border-top-right-radius: 0rem; border-bottom-right-radius: 0rem; }
  }
}

// Base Button Class
.btn {
  @include btn-base;
  @include btn-size('md');
  @include btn-shape('rounded');

  // Outline variant
  &.outline {
    @include btn-outline('text-secondary'); // Default outline style
    
    // Color variants override
    @each $name, $color in $colors {
      &.#{$name} {
        @include btn-outline($name);
      }
    }
  }
  
  // Ghost variant
  &.ghost {
    @include btn-ghost('text-secondary'); // Default ghost style
    
    // Color variants override
    @each $name, $color in $colors {
      &.#{$name} {
        @include btn-ghost($name);
      }
    }
  }
  
  // Color variants for solid buttons
  @each $name, $color in $colors {
    &.#{$name} {
      @include btn-solid($name);
    }
  }
}



// Icon Only Buttons
.btn.icon {
  padding: 0.5rem;
  
  &.btn-xs { padding: 0.25rem; }
  &.btn-sm { padding: 0.375rem; }
  &.btn-lg { padding: 0.75rem; }
  &.btn-xl { padding: 1rem; }
}

// Sizes
.btn-group.xs > .btn, .btn.xs { @include btn-size('xs'); }
.btn-group.sm > .btn, .btn.sm { @include btn-size('sm'); }
.btn-group.md > .btn, .btn.md { @include btn-size('md'); }
.btn-group.lg > .btn, .btn.lg { @include btn-size('lg'); }
.btn-group.xl > .btn, .btn.xl { @include btn-size('xl'); }

// Shapes
.btn-group.rounded > .btn, .btn.rounded { @include btn-shape('rounded'); }
.btn-group.pill    > .btn, .btn.pill { @include btn-shape('pill'); }
.btn-group.square  > .btn, .btn.square { @include btn-shape('square'); }

.btn-group {
  @include btn-group-base;
   // Color variants for solid buttons
   @each $name, $color in $colors {
    &.#{$name} > .btn{
      @include btn-solid($name);
    }
  }
}
// Outline variant
.btn-group.outline > .btn {
  @include btn-outline('text-secondary'); // Default outline style
}
// Color variants override
@each $name, $color in $colors {
  .btn-group.outline.#{$name} > .btn {
    @include btn-outline($name);
  }
}


// Outline variant
.btn-group.ghost > .btn {
  @include btn-ghost('text-secondary'); // Default outline style
}
// Color variants override
@each $name, $color in $colors {
  .btn-group.ghost.#{$name} > .btn {
    @include btn-ghost($name);
  }
}

// Loading Animation
@keyframes spin {
  to { transform: rotate(360deg); }
}
