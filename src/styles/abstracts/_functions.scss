@use "sass:string";
@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "config" as *;

@function str-replace($string, $search, $replace: " ") {
  $index: string.index($string, $search);
  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }
  @return $string;
}

@function get-breakpoint-value($bp) {
  @if map.has-key($breakpoints, $bp) {
    @return map.get($breakpoints, $bp);
  } @else if meta.type-of($bp) == number {
    @return $bp;
  } @else {
    @warn 'Invalid breakpoint: #{$bp}';
    @return null;
  }
}

@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

@function safe-unit-name($unit) {
  @if $unit == "%" {
    @return "per";
  } @else if $unit == "." {
    @return "dot";
  } @else {
    @return $unit;
  }
}

@function get-unit($value) {
  $value-str: #{$value};

  // Relative length units
  @if string.index($value-str, "em") {
    @return "em";
  } @else if string.index($value-str, "rem") {
    @return "rem";
  } @else if string.index($value-str, "%") {
    @return "%";
  }

  // Viewport units
  @else if string.index($value-str, "vw") {
    @return "vw";
  } @else if string.index($value-str, "vh") {
    @return "vh";
  } @else if string.index($value-str, "vmin") {
    @return "vmin";
  } @else if string.index($value-str, "vmax") {
    @return "vmax";
  }

  // Absolute length units
  @else if string.index($value-str, "px") {
    @return "px";
  } @else if string.index($value-str, "cm") {
    @return "cm";
  } @else if string.index($value-str, "mm") {
    @return "mm";
  } @else if string.index($value-str, "in") {
    @return "in";
  } @else if string.index($value-str, "pt") {
    @return "pt";
  } @else if string.index($value-str, "pc") {
    @return "pc";
  }

  // Return empty string if no unit found
  @return "";
}

/**
 * Ensures a value has a unit, adding $default-unit if none exists
 * @param {Number|String} $val - The value to check
 * @return {String} - The value with units
 */
@function fix-units($val, $unit: $default-unit) {
  
  @if meta.type-of($val) != number and meta.type-of($val) != string{
    @error "fix-units() requires a number or string value";
    @return null;
  }

  @if meta.type-of($val) == number {
    @if string.length(math.unit($val)) == 0 {
      @return string.unquote($val + $unit);
    }
    @return $val;
  }

  $val: strip-quotes($val);

  // Skip adding units to special values like 'auto', 'inherit', etc.
  @if $val == auto or $val == inherit or $val == initial or
    $val == 'min-content' or $val == 'max-content' or $val == 'fit-content' {
      @return string.unquote($val);
  }

  @if string.index($val, "px") or string.index($val, "em") or string.index($val, "rem") or
      string.index($val, "%") or string.index($val, "vh") or string.index($val, "vw") or
      string.index($val, "vmin") or string.index($val, "vmax") {
    // String already has a unit, return as is
    @return string.unquote($val);
  }

  @return string.unquote($val) + $unit;
}




@function strip-quotes($string) {
  @if meta.type-of($string) == string {
    // Check if the first and last characters are quotes
    @if string.slice($string, 1, 1) == '"' and string.slice($string, -1) == '"' {
      // Extract the content between quotes
      @return string.slice($string, 2, -2);
    }
    @else if string.slice($string, 1, 1) == "'" and string.slice($string, -1) == "'" {
      // Extract the content between single quotes
      @return string.slice($string, 2, -2);
    }
  }
  
  // Return unchanged if no quotes or not a string
  @return $string;
}

@function str-trim($string) {
  @while string.length($string) > 0 and string.slice($string, 1, 1) == " " {
    $string: string.slice($string, 2);
  }

  @while string.length($string) > 0 and string.slice($string, -1) == " " {
    $string: string.slice($string, 1, string.length($string) - 1);
  }

  @return $string;
}

@function split($string, $delimiter) {
  $result: ();
  $index: string.index($string, $delimiter);
  @while $index != null {
    $item: string.slice($string, 1, $index - 1);
    $result: list.append($result, str-trim(string.unquote(strip-quotes($item))));
    // $result: list.append($result, string.unquote(str-trim($item)));
    $string: string.slice($string, $index + string.length($delimiter));
    $index: string.index($string, $delimiter);
  }

  @return list.append($result, str-trim($string)); 
}

