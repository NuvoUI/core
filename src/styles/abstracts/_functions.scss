@use "sass:string";
@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "config" as *;

@function str-replace($string, $search, $replace: " ") {
  $index: string.index($string, $search);
  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }
  @return $string;
}

@function get-breakpoint-value($bp) {
  @if map.has-key($breakpoints, $bp) {
    @return map.get($breakpoints, $bp);
  } @else if meta.type-of($bp) == number {
    @return $bp;
  } @else {
    @warn 'Invalid breakpoint: #{$bp}';
    @return null;
  }
}

@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

@function safe-unit-name($unit) {
  @if $unit == "%" {
    @return "per";
  } @else if $unit == "." {
    @return "dot";
  } @else {
    @return $unit;
  }
}

@function get-unit($value) {
  $value-str: #{$value};

  // Relative length units
  @if string.index($value-str, "em") {
    @return "em";
  } @else if string.index($value-str, "rem") {
    @return "rem";
  } @else if string.index($value-str, "%") {
    @return "%";
  }

  // Viewport units
  @else if string.index($value-str, "vw") {
    @return "vw";
  } @else if string.index($value-str, "vh") {
    @return "vh";
  } @else if string.index($value-str, "vmin") {
    @return "vmin";
  } @else if string.index($value-str, "vmax") {
    @return "vmax";
  }

  // Absolute length units
  @else if string.index($value-str, "px") {
    @return "px";
  } @else if string.index($value-str, "cm") {
    @return "cm";
  } @else if string.index($value-str, "mm") {
    @return "mm";
  } @else if string.index($value-str, "in") {
    @return "in";
  } @else if string.index($value-str, "pt") {
    @return "pt";
  } @else if string.index($value-str, "pc") {
    @return "pc";
  }

  // Return empty string if no unit found
  @return "";
}
